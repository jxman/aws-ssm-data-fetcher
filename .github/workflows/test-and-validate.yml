name: 'Test and Validate'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests with pytest
      run: |
        python -m pytest tests/ -v --cov=aws_ssm_fetcher --cov-report=xml --cov-report=term

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Test Lambda Package Building
      run: |
        cd lambda_functions
        chmod +x scripts/build_packages.sh
        ./scripts/build_packages.sh

        echo "üîç Verifying package sizes..."

        # Check Lambda function packages (50MB limit)
        for package in */deployment_package.zip; do
          if [ -f "$package" ]; then
            size=$(stat -c%s "$package" 2>/dev/null || stat -f%z "$package" 2>/dev/null)
            size_mb=$((size / 1024 / 1024))
            echo "  ‚úÖ $package: ${size_mb}MB"
            if [ $size_mb -gt 50 ]; then
              echo "  ‚ùå Package $package exceeds 50MB limit (${size_mb}MB)"
              exit 1
            fi
          fi
        done

        # Check Lambda layer packages (250MB limit)
        for package in *_layer/*.zip shared_layer.zip; do
          if [ -f "$package" ]; then
            size=$(stat -c%s "$package" 2>/dev/null || stat -f%z "$package" 2>/dev/null)
            size_mb=$((size / 1024 / 1024))
            echo "  ‚úÖ Layer $package: ${size_mb}MB"
            if [ $size_mb -gt 250 ]; then
              echo "  ‚ùå Layer $package exceeds 250MB limit (${size_mb}MB)"
              exit 1
            fi
          fi
        done
        echo "‚úÖ All Lambda packages built successfully and within limits"

    - name: Test Lambda Functions Locally
      run: |
        cd lambda_functions
        python3 scripts/test_packages.py

    - name: Validate Terraform Configuration
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.13.1

    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check=true -diff=true -recursive

    - name: Terraform Validate
      run: |
        cd terraform
        terraform init -backend=false
        terraform validate

    - name: Security Scan with TFSec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform
        soft_fail: true

    - name: Test Deployment Script
      run: |
        chmod +x deploy.sh
        # Test help and validation
        ./deploy.sh --help
        echo "‚úÖ Deployment script validation passed"

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -r requirements.txt

    - name: Check code formatting with Black
      run: black --check --diff .

    - name: Check import sorting with isort
      run: isort --check-only --diff .

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type check with mypy
      run: mypy aws_ssm_fetcher --ignore-missing-imports
      continue-on-error: true

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Validate Documentation Structure
      run: |
        echo "üìö Checking documentation completeness..."

        # Check required documentation files
        required_files=(
          "README.md"
          "CURRENT_STATUS.md"
          "docs/README.md"
          "docs/deployment/DEPLOYMENT_GUIDE.md"
          "docs/deployment/TERRAFORM_INFRASTRUCTURE.md"
          "terraform/README.md"
        )

        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          else
            echo "  ‚úÖ $file"
          fi
        done

        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "‚ùå Missing documentation files:"
          printf '  - %s\n' "${missing_files[@]}"
          exit 1
        fi

        echo "‚úÖ All required documentation files present"

    - name: Check Documentation Links
      run: |
        echo "üîó Checking documentation links..."

        # Simple check for broken internal links
        find . -name "*.md" -exec grep -l "\[\.*\](" {} \; | while read -r file; do
          echo "Checking links in $file..."
          # This is a basic check - in production you might want to use a proper link checker
        done

        echo "‚úÖ Documentation link check completed"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install and run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r aws_ssm_fetcher -f json -o bandit-report.json || true
        bandit -r aws_ssm_fetcher || true
      continue-on-error: true

    - name: Check for secrets with TruffleHog
      # Skip if this is the first commit or if base and head are the same
      if: github.event_name == 'pull_request' || (github.event.before != null && github.event.before != '0000000000000000000000000000000000000000')
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
        head: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
        extra_args: --debug --only-verified

    - name: Filesystem scan for secrets (fallback)
      # Run filesystem scan when git history scan is not possible
      if: github.event_name != 'pull_request' && (github.event.before == null || github.event.before == '0000000000000000000000000000000000000000')
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified
