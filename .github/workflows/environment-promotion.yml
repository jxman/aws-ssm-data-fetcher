name: 'Environment Promotion'

on:
  workflow_dispatch:
    inputs:
      source_environment:
        description: 'Source environment to promote from'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
      target_environment:
        description: 'Target environment to promote to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - prod
      promotion_type:
        description: 'Type of promotion'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - rollback

permissions:
  id-token: write
  contents: read

env:
  TF_VERSION: 1.5.0
  AWS_REGION: us-east-1

jobs:
  validate-promotion:
    name: 'Validate Promotion Request'
    runs-on: ubuntu-latest

    outputs:
      valid: ${{ steps.validate.outputs.valid }}
      source_env: ${{ steps.validate.outputs.source_env }}
      target_env: ${{ steps.validate.outputs.target_env }}

    steps:
    - name: Validate Promotion Path
      id: validate
      run: |
        SOURCE="${{ github.event.inputs.source_environment }}"
        TARGET="${{ github.event.inputs.target_environment }}"

        # Validate promotion paths
        if [[ "$SOURCE" == "dev" && "$TARGET" == "staging" ]]; then
          echo "✅ Valid promotion: dev → staging"
          echo "valid=true" >> $GITHUB_OUTPUT
        elif [[ "$SOURCE" == "staging" && "$TARGET" == "prod" ]]; then
          echo "✅ Valid promotion: staging → prod"
          echo "valid=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Invalid promotion path: $SOURCE → $TARGET"
          echo "Valid paths: dev → staging, staging → prod"
          echo "valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        echo "source_env=$SOURCE" >> $GITHUB_OUTPUT
        echo "target_env=$TARGET" >> $GITHUB_OUTPUT

  promote:
    name: 'Promote to ${{ needs.validate-promotion.outputs.target_env }}'
    needs: validate-promotion
    if: needs.validate-promotion.outputs.valid == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.validate-promotion.outputs.target_env }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-EnvironmentPromotion

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python Dependencies
      run: |
        cd ../
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Lambda Packages
      run: |
        cd ../lambda_functions
        chmod +x scripts/build_packages.sh
        ./scripts/build_packages.sh

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Pre-Deployment Health Check
      run: |
        echo "🏥 Running pre-deployment health checks for ${{ needs.validate-promotion.outputs.source_env }}..."

        # Initialize source environment
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=aws-ssm-fetcher/${{ needs.validate-promotion.outputs.source_env }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="encrypt=true"

        # Check source environment health
        SOURCE_OUTPUTS=$(terraform output -json)
        echo "$SOURCE_OUTPUTS" | jq '.'

        # Verify source environment is healthy
        STEP_FUNCTION_ARN=$(echo "$SOURCE_OUTPUTS" | jq -r '.step_function_arn.value')

        if [ "$STEP_FUNCTION_ARN" != "null" ] && [ -n "$STEP_FUNCTION_ARN" ]; then
          echo "✅ Source environment appears healthy"
        else
          echo "❌ Source environment health check failed"
          exit 1
        fi

    - name: Initialize Target Environment
      run: |
        echo "🎯 Initializing target environment: ${{ needs.validate-promotion.outputs.target_env }}"

        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=aws-ssm-fetcher/${{ needs.validate-promotion.outputs.target_env }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="encrypt=true" \
          -reconfigure

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -var-file="environments/${{ needs.validate-promotion.outputs.target_env }}.tfvars" \
          -out=tfplan-${{ needs.validate-promotion.outputs.target_env }} \
          -detailed-exitcode
      continue-on-error: true

    - name: Terraform Apply
      if: steps.plan.outcome == 'success'
      run: |
        echo "🚀 Deploying to ${{ needs.validate-promotion.outputs.target_env }}..."

        terraform apply \
          -auto-approve \
          tfplan-${{ needs.validate-promotion.outputs.target_env }}

        echo "✅ Deployment to ${{ needs.validate-promotion.outputs.target_env }} completed!"

    - name: Post-Deployment Validation
      run: |
        echo "🧪 Running post-deployment validation..."

        # Get new environment outputs
        STEP_FUNCTION_ARN=$(terraform output -raw step_function_arn)
        S3_BUCKET=$(terraform output -raw s3_bucket_name)

        # Test deployment with a quick execution
        EXECUTION_ARN=$(aws stepfunctions start-execution \
          --state-machine-arn "$STEP_FUNCTION_ARN" \
          --input '{"test": true, "source": "promotion-validation"}' \
          --query 'executionArn' --output text)

        echo "Test execution started: $EXECUTION_ARN"

        # Wait briefly and check status
        sleep 30
        STATUS=$(aws stepfunctions describe-execution \
          --execution-arn "$EXECUTION_ARN" \
          --query 'status' --output text)

        if [ "$STATUS" = "SUCCEEDED" ] || [ "$STATUS" = "RUNNING" ]; then
          echo "✅ Post-deployment validation passed!"
        else
          echo "❌ Post-deployment validation failed: $STATUS"
          exit 1
        fi

    - name: Promotion Summary
      run: |
        echo "## 🚀 Environment Promotion Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Source**: ${{ needs.validate-promotion.outputs.source_env }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: ${{ needs.validate-promotion.outputs.target_env }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Promotion Type**: ${{ github.event.inputs.promotion_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        terraform output >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        DASHBOARD_URL=$(terraform output -raw cloudwatch_dashboard_url)
        echo "- [CloudWatch Dashboard]($DASHBOARD_URL)" >> $GITHUB_STEP_SUMMARY
        S3_BUCKET=$(terraform output -raw s3_bucket_name)
        echo "- S3 Bucket: \`$S3_BUCKET\`" >> $GITHUB_STEP_SUMMARY
